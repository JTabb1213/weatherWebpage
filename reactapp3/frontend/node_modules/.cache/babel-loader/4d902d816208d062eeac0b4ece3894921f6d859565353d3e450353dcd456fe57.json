{"ast":null,"code":"var _jsxFileName = \"/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js\",\n  _s = $RefreshSig$();\n//import { useState } from 'react'\nimport { Box, Button, ButtonGroup, Flex, HStack, IconButton, Input, Text } from '@chakra-ui/react';\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa';\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 48.8584,\n  lng: 2.2945\n};\nfunction CityInfo() {\n  _s();\n  /*\n  const [city, setCity] = useState(\"\");\n  const [geo, setGeo] = useState([]);\n  const [weather, setWeather] = useState([]);\n  */\n  const apiKey = 'AIzaSyB69lSr663-tF6TivTm-K1l79HomYTqxDE';\n  console.log(apiKey);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: apiKey\n  });\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n  /*\n  const geoCode = async () => {\n      console.log(city);\n      const geoCodeServiceUrl =\n          \"http://localhost:4000/api/geolocation?address=\";\n      const response = await fetch(geoCodeServiceUrl + city);\n      var dataGeo = await response.json();//await for response. store response in data\n      console.log(dataGeo);\n      setGeo(dataGeo);\n  }\n   const checkWeather = async () => {\n       const weatherServiceUrl =\n          \"http://localhost:4000/api/weather?units=imperial&city=\";\n      const response = await fetch(weatherServiceUrl + city);//make request to server\n      var dataWeather = await response.json();//await for response. store response in data \n      console.log(dataWeather);\n      setWeather(dataWeather);\n  }\n    const handleChange = (e) => {\n      e.preventDefault();\n      setCity(e.target.value);\n  };\n   const handleSearch = () => {\n      Promise.all([checkWeather(), geoCode()]);\n  }\n  */\n  return (\n    /*#__PURE__*/\n    /*\n    <div id=\"container\">\n        <div className=\"search\">\n            \n            <input\n                type=\"text\"\n                id=\"cityInput\"\n                placeholder=\"enter city name\"\n                spellCheck=\"false\"\n                value={city}\n                onChange={handleChange}\n            />\n            <button id=\"searchButton\" onClick={handleSearch}>search</button>\n        </div>\n         <div className=\"weather\">\n            <h1 className=\"city\">City: {weather.name && weather.name}</h1>\n            <h2 className=\"temp\">Temp: {weather.main && Math.round(weather.main.temp) + \" F\"}</h2>\n            <h3 className=\"humidity\">Humidity: {weather.main && weather.main.humidity + \" % humidity\"}</h3>\n            <h4 className=\"wind\">Wind: {weather.wind && weather.wind.speed + \" mph\"}</h4>\n            <h5 className=\"feelsLike\">Feels like: {weather.main && Math.round(weather.main.feels_like) + \" F\"}</h5>\n            <h6 className=\"clouds\">{weather.weather && weather.weather[0].main + \" skies\"}</h6>\n        </div>\n         <div className=\"location\">\n            <h1 className=\"lat\">ln: {geo.results && geo.results[0].geometry.location.lng}</h1>\n            <h2 className=\"lng\">lat: {geo.results && geo.results[0].geometry.location.lat}</h2>\n        \n            <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n             </GoogleMap>\n        </div>\n    </div >\n    \n    <div id=\"container\">\n        <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n        </GoogleMap>\n     </div>\n    */\n    _jsxDEV(Flex, {\n      position: \"relative\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      bgColor: \"blue.200\",\n      h: \"100vh\",\n      w: \"100vw\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        h: \"100%\",\n        w: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: center,\n        zoom: 15,\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        p: 4,\n        borderRadius: \"lg\",\n        mt: 4,\n        bgColor: \"white\",\n        shadow: \"base\",\n        minW: \"container.md\",\n        zIndex: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 4,\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Origin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Destination\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"pink\",\n              type: \"submit\",\n              children: \"Calculate Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"center back\",\n              icon: /*#__PURE__*/_jsxDEV(FaTimes, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 35\n              }, this),\n              onClick: () => alert(123)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 4,\n          mt: 4,\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: \"Distance: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: \"Duration: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"center back\",\n            icon: /*#__PURE__*/_jsxDEV(FaLocationArrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 31\n            }, this),\n            isRound: true,\n            onClick: () => alert(123)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(CityInfo, \"mLN67oIZdYDfCjxG2Fcvbwz7Mfk=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = CityInfo;\nexport default CityInfo;\nvar _c;\n$RefreshReg$(_c, \"CityInfo\");","map":{"version":3,"names":["Box","Button","ButtonGroup","Flex","HStack","IconButton","Input","Text","FaLocationArrow","FaTimes","useJsApiLoader","GoogleMap","jsxDEV","_jsxDEV","center","lat","lng","CityInfo","_s","apiKey","console","log","isLoaded","googleMapsApiKey","children","fileName","_jsxFileName","lineNumber","columnNumber","position","flexDirection","alignItems","bgColor","h","w","left","top","zoom","mapContainerStyle","width","height","p","borderRadius","mt","shadow","minW","zIndex","spacing","type","placeholder","colorScheme","icon","onClick","alert","justifyContent","isRound","_c","$RefreshReg$"],"sources":["/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js"],"sourcesContent":["//import { useState } from 'react'\nimport {\n    Box,\n    Button,\n    ButtonGroup,\n    Flex,\n    HStack,\n    IconButton,\n    Input,\n    Text,\n} from '@chakra-ui/react'\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa'\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\n\nconst center = { lat: 48.8584, lng: 2.2945 }\n\nfunction CityInfo() {\n    /*\n    const [city, setCity] = useState(\"\");\n    const [geo, setGeo] = useState([]);\n    const [weather, setWeather] = useState([]);\n    */\n    const apiKey = 'AIzaSyB69lSr663-tF6TivTm-K1l79HomYTqxDE';\n    console.log(apiKey);\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: apiKey,\n    })\n\n    if (!isLoaded) {\n        return <div>Loading map</div>;\n    }\n    /*\n    const geoCode = async () => {\n        console.log(city);\n        const geoCodeServiceUrl =\n            \"http://localhost:4000/api/geolocation?address=\";\n        const response = await fetch(geoCodeServiceUrl + city);\n        var dataGeo = await response.json();//await for response. store response in data\n        console.log(dataGeo);\n        setGeo(dataGeo);\n    }\n\n    const checkWeather = async () => {\n\n        const weatherServiceUrl =\n            \"http://localhost:4000/api/weather?units=imperial&city=\";\n        const response = await fetch(weatherServiceUrl + city);//make request to server\n        var dataWeather = await response.json();//await for response. store response in data \n        console.log(dataWeather);\n        setWeather(dataWeather);\n    }\n\n\n    const handleChange = (e) => {\n        e.preventDefault();\n        setCity(e.target.value);\n    };\n\n    const handleSearch = () => {\n        Promise.all([checkWeather(), geoCode()]);\n    }\n    */\n    return (\n        /*\n        <div id=\"container\">\n            <div className=\"search\">\n                \n                <input\n                    type=\"text\"\n                    id=\"cityInput\"\n                    placeholder=\"enter city name\"\n                    spellCheck=\"false\"\n                    value={city}\n                    onChange={handleChange}\n                />\n                <button id=\"searchButton\" onClick={handleSearch}>search</button>\n            </div>\n\n            <div className=\"weather\">\n                <h1 className=\"city\">City: {weather.name && weather.name}</h1>\n                <h2 className=\"temp\">Temp: {weather.main && Math.round(weather.main.temp) + \" F\"}</h2>\n                <h3 className=\"humidity\">Humidity: {weather.main && weather.main.humidity + \" % humidity\"}</h3>\n                <h4 className=\"wind\">Wind: {weather.wind && weather.wind.speed + \" mph\"}</h4>\n                <h5 className=\"feelsLike\">Feels like: {weather.main && Math.round(weather.main.feels_like) + \" F\"}</h5>\n                <h6 className=\"clouds\">{weather.weather && weather.weather[0].main + \" skies\"}</h6>\n            </div>\n\n            <div className=\"location\">\n                <h1 className=\"lat\">ln: {geo.results && geo.results[0].geometry.location.lng}</h1>\n                <h2 className=\"lng\">lat: {geo.results && geo.results[0].geometry.location.lat}</h2>\n            \n                <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n\n                </GoogleMap>\n            </div>\n        </div >\n        \n        <div id=\"container\">\n            <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n            </GoogleMap>\n\n        </div>\n        */\n        <Flex\n            position='relative'\n            flexDirection='column'\n            alignItems='center'\n            bgColor='blue.200'\n            h='100vh'\n            w='100vw'\n        >\n            <Box position='absolute' left={0} top={0} h='100%' w='100%'></Box>\n            {/*google map box*/}\n            <GoogleMap\n                center={center}\n                zoom={15}\n                mapContainerStyle={{ width: '100%', height: '100%' }}\n            >\n                {/*display...*/}\n            </GoogleMap>\n            <Box\n                p={4}\n                borderRadius='lg'\n                mt={4}\n                bgColor='white'\n                shadow='base'\n                minW='container.md'\n                zIndex='modal'\n            >\n                <HStack spacing={4}>\n                    <Input type='text' placeholder='Origin' />\n                    <Input type='text' placeholder='Destination' />\n                    <ButtonGroup>\n                        <Button colorScheme='pink' type='submit'>\n                            Calculate Route\n                        </Button>\n                        <IconButton\n                            aria-label='center back'\n                            icon={<FaTimes />}\n                            onClick={() => alert(123)}\n                        />\n                    </ButtonGroup>\n                </HStack>\n                <HStack spacing={4} mt={4} justifyContent='space-between'>\n                    <Text>Distance: </Text>\n                    <Text>Duration: </Text>\n                    <IconButton\n                        aria-label='center back'\n                        icon={<FaLocationArrow />}\n                        isRound\n                        onClick={() => alert(123)}\n                    />\n                </HStack>\n            </Box>\n        </Flex>\n    );\n}\nexport default CityInfo;"],"mappings":";;AAAA;AACA,SACIA,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,MAAM,EACNC,UAAU,EACVC,KAAK,EACLC,IAAI,QACD,kBAAkB;AACzB,SAASC,eAAe,EAAEC,OAAO,QAAQ,gBAAgB;AACzD,SAASC,cAAc,EAAEC,SAAS,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,MAAM,GAAG;EAAEC,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAO,CAAC;AAE5C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB;AACJ;AACA;AACA;AACA;EACI,MAAMC,MAAM,GAAG,yCAAyC;EACxDC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,MAAM;IAAEG;EAAS,CAAC,GAAGZ,cAAc,CAAC;IAChCa,gBAAgB,EAAEJ;EACtB,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,EAAE;IACX,oBAAOT,OAAA;MAAAW,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAMI;IAAA;IACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAKQf,OAAA,CAACV,IAAI;MACD0B,QAAQ,EAAC,UAAU;MACnBC,aAAa,EAAC,QAAQ;MACtBC,UAAU,EAAC,QAAQ;MACnBC,OAAO,EAAC,UAAU;MAClBC,CAAC,EAAC,OAAO;MACTC,CAAC,EAAC,OAAO;MAAAV,QAAA,gBAETX,OAAA,CAACb,GAAG;QAAC6B,QAAQ,EAAC,UAAU;QAACM,IAAI,EAAE,CAAE;QAACC,GAAG,EAAE,CAAE;QAACH,CAAC,EAAC,MAAM;QAACC,CAAC,EAAC;MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAElEf,OAAA,CAACF,SAAS;QACNG,MAAM,EAAEA,MAAO;QACfuB,IAAI,EAAE,EAAG;QACTC,iBAAiB,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAG9C,CAAC,eACZf,OAAA,CAACb,GAAG;QACAyC,CAAC,EAAE,CAAE;QACLC,YAAY,EAAC,IAAI;QACjBC,EAAE,EAAE,CAAE;QACNX,OAAO,EAAC,OAAO;QACfY,MAAM,EAAC,MAAM;QACbC,IAAI,EAAC,cAAc;QACnBC,MAAM,EAAC,OAAO;QAAAtB,QAAA,gBAEdX,OAAA,CAACT,MAAM;UAAC2C,OAAO,EAAE,CAAE;UAAAvB,QAAA,gBACfX,OAAA,CAACP,KAAK;YAAC0C,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAQ;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC1Cf,OAAA,CAACP,KAAK;YAAC0C,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAa;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC/Cf,OAAA,CAACX,WAAW;YAAAsB,QAAA,gBACRX,OAAA,CAACZ,MAAM;cAACiD,WAAW,EAAC,MAAM;cAACF,IAAI,EAAC,QAAQ;cAAAxB,QAAA,EAAC;YAEzC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTf,OAAA,CAACR,UAAU;cACP,cAAW,aAAa;cACxB8C,IAAI,eAAEtC,OAAA,CAACJ,OAAO;gBAAAgB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAE;cAClBwB,OAAO,EAAEA,CAAA,KAAMC,KAAK,CAAC,GAAG;YAAE;cAAA5B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,eACTf,OAAA,CAACT,MAAM;UAAC2C,OAAO,EAAE,CAAE;UAACJ,EAAE,EAAE,CAAE;UAACW,cAAc,EAAC,eAAe;UAAA9B,QAAA,gBACrDX,OAAA,CAACN,IAAI;YAAAiB,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvBf,OAAA,CAACN,IAAI;YAAAiB,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvBf,OAAA,CAACR,UAAU;YACP,cAAW,aAAa;YACxB8C,IAAI,eAAEtC,OAAA,CAACL,eAAe;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YAC1B2B,OAAO;YACPH,OAAO,EAAEA,CAAA,KAAMC,KAAK,CAAC,GAAG;UAAE;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;AAEf;AAACV,EAAA,CA5IQD,QAAQ;EAAA,QAQQP,cAAc;AAAA;AAAA8C,EAAA,GAR9BvC,QAAQ;AA6IjB,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}