{"ast":null,"code":"var _jsxFileName = \"/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js\",\n  _s = $RefreshSig$();\nimport { SkeletonText } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport './CityInfo.css';\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 48.8584,\n  lng: 2.2945\n};\nfunction CityInfo() {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [geo, setGeo] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY\n  });\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(SkeletonText, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n  const geoCode = async () => {\n    console.log(city);\n    const geoCodeServiceUrl = \"http://localhost:4000/api/geolocation?address=\";\n    const response = await fetch(geoCodeServiceUrl + city);\n    var dataGeo = await response.json(); //await for response. store response in data\n    console.log(dataGeo);\n    setGeo(dataGeo);\n  };\n  const checkWeather = async () => {\n    const weatherServiceUrl = \"http://localhost:4000/api/weather?units=imperial&city=\";\n    const response = await fetch(weatherServiceUrl + city); //make request to server\n    var dataWeather = await response.json(); //await for response. store response in data \n    console.log(dataWeather);\n    setWeather(dataWeather);\n  };\n  const handleChange = e => {\n    e.preventDefault();\n    setCity(e.target.value);\n  };\n  const handleSearch = () => {\n    Promise.all([checkWeather(), geoCode()]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"cityInput\",\n        placeholder: \"enter city name\",\n        spellCheck: \"false\",\n        value: city,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"searchButton\",\n        onClick: handleSearch,\n        children: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"city\",\n        children: [\"City: \", weather.name && weather.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"temp\",\n        children: [\"Temp: \", weather.main && Math.round(weather.main.temp) + \" F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"humidity\",\n        children: [\"Humidity: \", weather.main && weather.main.humidity + \" % humidity\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"wind\",\n        children: [\"Wind: \", weather.wind && weather.wind.speed + \" mph\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"feelsLike\",\n        children: [\"Feels like: \", weather.main && Math.round(weather.main.feels_like) + \" F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"clouds\",\n        children: weather.weather && weather.weather[0].main + \" skies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"lat\",\n        children: [\"ln: \", geo.results && geo.results[0].geometry.location.lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"lng\",\n        children: [\"lat: \", geo.results && geo.results[0].geometry.location.lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: center,\n        zoom: 15,\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(CityInfo, \"s6NuX5kzQtzTYh1YigMlqXhdvDw=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = CityInfo;\nexport default CityInfo;\nvar _c;\n$RefreshReg$(_c, \"CityInfo\");","map":{"version":3,"names":["SkeletonText","useState","useJsApiLoader","GoogleMap","jsxDEV","_jsxDEV","center","lat","lng","CityInfo","_s","city","setCity","geo","setGeo","weather","setWeather","isLoaded","googleMapsApiKey","process","env","REACT_APP_GOOGLE_API_KEY","fileName","_jsxFileName","lineNumber","columnNumber","geoCode","console","log","geoCodeServiceUrl","response","fetch","dataGeo","json","checkWeather","weatherServiceUrl","dataWeather","handleChange","e","preventDefault","target","value","handleSearch","Promise","all","id","children","className","type","placeholder","spellCheck","onChange","onClick","name","main","Math","round","temp","humidity","wind","speed","feels_like","results","geometry","location","zoom","mapContainerStyle","width","height","_c","$RefreshReg$"],"sources":["/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js"],"sourcesContent":["import {\n    SkeletonText,\n} from '@chakra-ui/react'\n\n\nimport { useState } from 'react'\nimport './CityInfo.css';\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\n\nconst center = { lat: 48.8584, lng: 2.2945 }\n\nfunction CityInfo() {\n    const [city, setCity] = useState(\"\");\n    const [geo, setGeo] = useState([]);\n    const [weather, setWeather] = useState([]);\n\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    })\n\n    if (!isLoaded) {\n        return <SkeletonText />\n    }\n    const geoCode = async () => {\n        console.log(city);\n        const geoCodeServiceUrl =\n            \"http://localhost:4000/api/geolocation?address=\";\n        const response = await fetch(geoCodeServiceUrl + city);\n        var dataGeo = await response.json();//await for response. store response in data\n        console.log(dataGeo);\n        setGeo(dataGeo);\n    }\n\n    const checkWeather = async () => {\n\n        const weatherServiceUrl =\n            \"http://localhost:4000/api/weather?units=imperial&city=\";\n        const response = await fetch(weatherServiceUrl + city);//make request to server\n        var dataWeather = await response.json();//await for response. store response in data \n        console.log(dataWeather);\n        setWeather(dataWeather);\n    }\n\n\n    const handleChange = (e) => {\n        e.preventDefault();\n        setCity(e.target.value);\n    };\n\n    const handleSearch = () => {\n        Promise.all([checkWeather(), geoCode()]);\n    }\n    return (\n        <div id=\"container\">\n            <div className=\"search\">\n                <input\n                    type=\"text\"\n                    id=\"cityInput\"\n                    placeholder=\"enter city name\"\n                    spellCheck=\"false\"\n                    value={city}\n                    onChange={handleChange}\n                />\n                <button id=\"searchButton\" onClick={handleSearch}>search</button>\n            </div>\n\n            <div className=\"weather\">\n                <h1 className=\"city\">City: {weather.name && weather.name}</h1>\n                <h2 className=\"temp\">Temp: {weather.main && Math.round(weather.main.temp) + \" F\"}</h2>\n                <h3 className=\"humidity\">Humidity: {weather.main && weather.main.humidity + \" % humidity\"}</h3>\n                <h4 className=\"wind\">Wind: {weather.wind && weather.wind.speed + \" mph\"}</h4>\n                <h5 className=\"feelsLike\">Feels like: {weather.main && Math.round(weather.main.feels_like) + \" F\"}</h5>\n                <h6 className=\"clouds\">{weather.weather && weather.weather[0].main + \" skies\"}</h6>\n            </div>\n\n            <div className=\"location\">\n                <h1 className=\"lat\">ln: {geo.results && geo.results[0].geometry.location.lng}</h1>\n                <h2 className=\"lng\">lat: {geo.results && geo.results[0].geometry.location.lat}</h2>\n                <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n\n                </GoogleMap>\n            </div>\n        </div >\n    );\n}\nexport default CityInfo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}