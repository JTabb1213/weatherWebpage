{"ast":null,"code":"var _jsxFileName = \"/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './CityInfo.css';\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 48.8584,\n  lng: 2.2945\n};\nfunction CityInfo() {\n  _s();\n  /*\n  const [city, setCity] = useState(\"\");\n  const [geo, setGeo] = useState([]);\n  const [weather, setWeather] = useState([]);\n  */\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: 'AIzaSyACIA19K6cIQ6ihLywhOUOnisNSlA5KQrk'\n  });\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n  /*\n  const geoCode = async () => {\n      console.log(city);\n      const geoCodeServiceUrl =\n          \"http://localhost:4000/api/geolocation?address=\";\n      const response = await fetch(geoCodeServiceUrl + city);\n      var dataGeo = await response.json();//await for response. store response in data\n      console.log(dataGeo);\n      setGeo(dataGeo);\n  }\n   const checkWeather = async () => {\n       const weatherServiceUrl =\n          \"http://localhost:4000/api/weather?units=imperial&city=\";\n      const response = await fetch(weatherServiceUrl + city);//make request to server\n      var dataWeather = await response.json();//await for response. store response in data \n      console.log(dataWeather);\n      setWeather(dataWeather);\n  }\n    const handleChange = (e) => {\n      e.preventDefault();\n      setCity(e.target.value);\n  };\n   const handleSearch = () => {\n      Promise.all([checkWeather(), geoCode()]);\n  }\n  */\n  return (\n    /*#__PURE__*/\n    /*\n    <div id=\"container\">\n        <div className=\"search\">\n            \n            <input\n                type=\"text\"\n                id=\"cityInput\"\n                placeholder=\"enter city name\"\n                spellCheck=\"false\"\n                value={city}\n                onChange={handleChange}\n            />\n            <button id=\"searchButton\" onClick={handleSearch}>search</button>\n        </div>\n         <div className=\"weather\">\n            <h1 className=\"city\">City: {weather.name && weather.name}</h1>\n            <h2 className=\"temp\">Temp: {weather.main && Math.round(weather.main.temp) + \" F\"}</h2>\n            <h3 className=\"humidity\">Humidity: {weather.main && weather.main.humidity + \" % humidity\"}</h3>\n            <h4 className=\"wind\">Wind: {weather.wind && weather.wind.speed + \" mph\"}</h4>\n            <h5 className=\"feelsLike\">Feels like: {weather.main && Math.round(weather.main.feels_like) + \" F\"}</h5>\n            <h6 className=\"clouds\">{weather.weather && weather.weather[0].main + \" skies\"}</h6>\n        </div>\n         <div className=\"location\">\n            <h1 className=\"lat\">ln: {geo.results && geo.results[0].geometry.location.lng}</h1>\n            <h2 className=\"lng\">lat: {geo.results && geo.results[0].geometry.location.lat}</h2>\n        \n            <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n             </GoogleMap>\n        </div>\n    </div >\n    */\n    _jsxDEV(\"div\", {\n      id: \"container\",\n      children: [\"HI\", /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: center,\n        zoom: 15,\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(CityInfo, \"mLN67oIZdYDfCjxG2Fcvbwz7Mfk=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = CityInfo;\nexport default CityInfo;\nvar _c;\n$RefreshReg$(_c, \"CityInfo\");","map":{"version":3,"names":["useState","useJsApiLoader","GoogleMap","jsxDEV","_jsxDEV","center","lat","lng","CityInfo","_s","isLoaded","googleMapsApiKey","children","fileName","_jsxFileName","lineNumber","columnNumber","id","zoom","mapContainerStyle","width","height","_c","$RefreshReg$"],"sources":["/Users/jacktabb/weatherWebpage/reactapp3/frontend/src/components/CityInfo.js"],"sourcesContent":["import { useState } from 'react'\nimport './CityInfo.css';\nimport { useJsApiLoader, GoogleMap } from '@react-google-maps/api';\n\nconst center = { lat: 48.8584, lng: 2.2945 }\n\nfunction CityInfo() {\n    /*\n    const [city, setCity] = useState(\"\");\n    const [geo, setGeo] = useState([]);\n    const [weather, setWeather] = useState([]);\n    */\n\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: 'AIzaSyACIA19K6cIQ6ihLywhOUOnisNSlA5KQrk',\n    })\n\n    if (!isLoaded) {\n        return <div>Loading map</div>;\n    }\n    /*\n    const geoCode = async () => {\n        console.log(city);\n        const geoCodeServiceUrl =\n            \"http://localhost:4000/api/geolocation?address=\";\n        const response = await fetch(geoCodeServiceUrl + city);\n        var dataGeo = await response.json();//await for response. store response in data\n        console.log(dataGeo);\n        setGeo(dataGeo);\n    }\n\n    const checkWeather = async () => {\n\n        const weatherServiceUrl =\n            \"http://localhost:4000/api/weather?units=imperial&city=\";\n        const response = await fetch(weatherServiceUrl + city);//make request to server\n        var dataWeather = await response.json();//await for response. store response in data \n        console.log(dataWeather);\n        setWeather(dataWeather);\n    }\n\n\n    const handleChange = (e) => {\n        e.preventDefault();\n        setCity(e.target.value);\n    };\n\n    const handleSearch = () => {\n        Promise.all([checkWeather(), geoCode()]);\n    }\n    */\n    return (\n        /*\n        <div id=\"container\">\n            <div className=\"search\">\n                \n                <input\n                    type=\"text\"\n                    id=\"cityInput\"\n                    placeholder=\"enter city name\"\n                    spellCheck=\"false\"\n                    value={city}\n                    onChange={handleChange}\n                />\n                <button id=\"searchButton\" onClick={handleSearch}>search</button>\n            </div>\n\n            <div className=\"weather\">\n                <h1 className=\"city\">City: {weather.name && weather.name}</h1>\n                <h2 className=\"temp\">Temp: {weather.main && Math.round(weather.main.temp) + \" F\"}</h2>\n                <h3 className=\"humidity\">Humidity: {weather.main && weather.main.humidity + \" % humidity\"}</h3>\n                <h4 className=\"wind\">Wind: {weather.wind && weather.wind.speed + \" mph\"}</h4>\n                <h5 className=\"feelsLike\">Feels like: {weather.main && Math.round(weather.main.feels_like) + \" F\"}</h5>\n                <h6 className=\"clouds\">{weather.weather && weather.weather[0].main + \" skies\"}</h6>\n            </div>\n\n            <div className=\"location\">\n                <h1 className=\"lat\">ln: {geo.results && geo.results[0].geometry.location.lng}</h1>\n                <h2 className=\"lng\">lat: {geo.results && geo.results[0].geometry.location.lat}</h2>\n            \n                <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n\n                </GoogleMap>\n            </div>\n        </div >\n        */\n        <div id=\"container\">\n            HI\n            <GoogleMap center={center} zoom={15} mapContainerStyle={{ width: '100%', height: '100%' }}>\n            </GoogleMap>\n\n        </div>\n    );\n}\nexport default CityInfo;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,gBAAgB;AACvB,SAASC,cAAc,EAAEC,SAAS,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,MAAM,GAAG;EAAEC,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAO,CAAC;AAE5C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB;AACJ;AACA;AACA;AACA;;EAEI,MAAM;IAAEC;EAAS,CAAC,GAAGT,cAAc,CAAC;IAChCU,gBAAgB,EAAE;EACtB,CAAC,CAAC;EAEF,IAAI,CAACD,QAAQ,EAAE;IACX,oBAAON,OAAA;MAAAQ,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAMI;IAAA;IACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAIQZ,OAAA;MAAKa,EAAE,EAAC,WAAW;MAAAL,QAAA,GAAC,IAEhB,eAAAR,OAAA,CAACF,SAAS;QAACG,MAAM,EAAEA,MAAO;QAACa,IAAI,EAAE,EAAG;QAACC,iBAAiB,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEX;EAAC;AAEd;AAACP,EAAA,CAvFQD,QAAQ;EAAA,QAOQP,cAAc;AAAA;AAAAqB,EAAA,GAP9Bd,QAAQ;AAwFjB,eAAeA,QAAQ;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}